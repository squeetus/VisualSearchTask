<!DOCTYPE html>
<meta charset="utf-8">
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="./shared.js"></script>
<script>

/* https://bl.ocks.org/mbostock/19168c663618b7f07158#index.html */

var delta = 50,
    runningAvg = [0,0],
    redos = 0;

var aSample = poissonDiscSampler(width, height, padding);

var counts = [0,0],
    averageY = [0,0],
    masterCount = 0,
    movingAverage = 0;

function calcRunningAvg(previousAverage, currentNumber, index) {
  // [ avg' * (n-1) + x ] / n
  return ( previousAverage * (index - 1) + currentNumber ) / index;
}

function start () {
  d3.timer(function() {
    if(masterCount >= maxElements) {
      finalize();
      return true;
    };

    for (var i = 0; i < maxElements; ++i) {

      if(masterCount % 2 == 0) {
        var s = aSample(1);
        if (!s) return true;

        // use whole numbers?
        s[0] = Math.floor(s[0]);
        s[1] = Math.floor(s[1]);

        drawShape(shape1, s, 0, svg1);
        runningAvg[0] = calcRunningAvg(runningAvg[0], s[1], counts[0]);
      } else {
        if(mode == 0)
          var s = aSample(1);
        else
          var s = aSample(2);
        if (!s) return true;

        // use whole numbers?
        s[0] = Math.floor(s[0]);
        s[1] = Math.floor(s[1]);

        if(mode == 0)
            drawShape(shape2, s, 1, svg1);
        else {
            drawShape(shape2, s, 1, svg2);
        }
        runningAvg[1] = calcRunningAvg(runningAvg[1], s[1], counts[1]);
      }
      masterCount++;
    }
  });
}

function finalize() {
  var actualDelta = Math.abs(runningAvg[0] - runningAvg[1]),
      distanceToFix = Math.abs(actualDelta - delta)
  // console.log(counts, runningAvg[0], runningAvg[1], 'delta:', actualDelta);

  if(distanceToFix <= 5) {
    // console.log("fix");

    // console.log(computeDelta());
    fix();
  } else {
      // console.log("redo", ++redos);
      reset();
      start();
  }
}

function fix() {
  // adjust lower class down to meet delta
  var actualDelta = Math.abs(runningAvg[0] - runningAvg[1]);
  var distanceToFix = Math.abs(actualDelta - delta)
  var shape0 = d3.selectAll(".shape").filter(function(d) { return d3.select(this).attr("shape") == "shape0" });
  var shape1 = d3.selectAll(".shape").filter(function(d) { return d3.select(this).attr("shape") == "shape1" });
  console.log(delta, actualDelta);


  // actual Delta is too much
  if(delta < actualDelta) {
    // console.log('decrease delta', distanceToFix);
    shape0.each(function(d, i) {
      d3.select(this)
          .attr("transform", "translate(0," + (-1*distanceToFix) + ") scale(1, 1)");
      d3.select(this).attr("myY", (1*d3.select(this).attr("myY")) - distanceToFix);
      // console.log(d3.select(this).attr("myY"));
    });

  }
  // actual delta is too small
  else if (delta > actualDelta){
    // console.log('increase delta', distanceToFix);
    shape0.each(function(d, i) {
      d3.select(this).attr("transform", "translate(0," + distanceToFix + ") scale(1, 1)");
      d3.select(this).attr("myY", (1*d3.select(this).attr("myY")) + distanceToFix);
      // console.log(d3.select(this).attr("myY"));
    });
  }
  else {
    console.log(computeDelta());
  }
  console.log(computeDelta());

  //
}

function computeDelta() {
  var yAttr1 = (shape1 == 0) ? 'cy' : 'y';
  var yAttr2 = (shape2 == 0) ? 'cy' : 'y';
  avg = [0,0];

  var firstShape = d3.selectAll(".shape0");
  var secondShape = d3.selectAll(".shape1");

  firstShape.each(function(d, i) {
    avg[0] += 1*d3.select(this).attr(yAttr1);
  });

  secondShape.each(function(d, i) {
    avg[1] += 1*d3.select(this).attr(yAttr2);
  });


  avg[1] = avg[1] / (maxElements / 2);
  avg[0] = avg[0] / (maxElements / 2);
  return Math.abs(avg[0] - avg[1]);
}

function reset() {
  svg1.selectAll(".shape1").remove();
  svg1.selectAll(".shape0").remove();
  if(svg2) {
    svg2.selectAll(".shape1").remove();
    svg2.selectAll(".shape0").remove();
  }
  runningAvg = [0,0];
  aSample = poissonDiscSampler(width, height, padding);

  counts = [0,0];
  averageY = [0,0];
  masterCount = 0;
  movingAverage = 0;
}

// Based on https://www.jasondavies.com/poisson-disc/
function poissonDiscSampler(width, height, radius) {
  var k = 30, // maximum number of samples before rejection
      radius2 = radius * radius,
      R = 3 * radius2,
      cellSize = radius * Math.SQRT1_2,
      gridWidth = Math.ceil(width / cellSize),
      gridHeight = Math.ceil(height / cellSize),
      grid1 = new Array(gridWidth * gridHeight),
      grid2 = new Array(gridWidth * gridHeight),
      queue = [],
      queueSize = 0,
      sampleSize = 0;

  return function(whichSVG) {
    // if (!sampleSize) return sample(Math.random() * width, Math.random() * height);
    if (!sampleSize) return sample(width/2, getMiddleY(), whichSVG);

    // console.log(masterCount, 'drawing shape', masterCount % 2, ' delta is', runningAvg[0] - runningAvg[1], 'should be', delta)
    var actualDelta = runningAvg[0] - runningAvg[1];
    // var bias = Math.sqrt(Math.abs(delta - actualDelta));
    var bias = Math.sqrt(delta - actualDelta) * 4;

    // bias shape 0 upward / shape 1 downward
    if (actualDelta < delta) {
        // finding shape 1
        if(masterCount % 2 != 0) {
          bias = -1 * bias;
        }
    }
    // bias 0 down, 1 up
    if (actualDelta > delta) {
        // finding shape 0
        if(masterCount % 2 == 0) {
          bias = -1 * bias;
        }
    }

    bias = bias || 0;
    // console.log('bias:', bias);

    // Pick a random existing sample and remove it from the queue.
    while (queueSize) {
      var i = Math.random() * queueSize | 0,
          s = queue[i];

      // Make a new candidate between [radius, 2 * radius] from the existing sample.
      for (var j = 0; j < k; ++j) {
        var a = 2 * Math.PI * Math.random(),
            r = Math.sqrt(Math.random() * R + radius2),
            x = s[0] + r * Math.cos(a),
            y = s[1] + r * Math.sin(a) + bias;


        // Reject candidates that are outside the allowed extent,
        // or closer than 2 * radius to any existing sample.
        if (0 <= x && x < width && 0 <= y && y < height && far(x, y, whichSVG)) return sample(x, y, whichSVG);
      }

      queue[i] = queue[--queueSize];
      queue.length = queueSize;
    }
  };

  function far(x, y, whichSVG) {
    var i = x / cellSize | 0,
        j = y / cellSize | 0,
        i0 = Math.max(i - 2, 0),
        j0 = Math.max(j - 2, 0),
        i1 = Math.min(i + 3, gridWidth),
        j1 = Math.min(j + 3, gridHeight);

    for (j = j0; j < j1; ++j) {
      var o = j * gridWidth;
      for (i = i0; i < i1; ++i) {
        if(whichSVG == 1) {
          if (s = grid1[o + i]) {
            // console.log('overlap in 1');
            var s,
                dx = s[0] - x,
                dy = s[1] - y;
            if (dx * dx + dy * dy < radius2) return false;
          }
        } else if(whichSVG == 2) {
          if (s = grid2[o + i]) {
            // console.log('overlap in 2');
            var s,
                dx = s[0] - x,
                dy = s[1] - y;
            if (dx * dx + dy * dy < radius2) return false;
          }
        } else {
          // console.log("???");
        }
      }
    }

    return true;
  }

  function getMiddleY() {
    console.log('middle');
    return height * (Math.random() * (0.7 - 0.3) + 0.3);

  }

  function sample(x, y, whichSVG) {
    var s = [x, y];
    queue.push(s);
    if(whichSVG == 1) {
      grid1[gridWidth * (y / cellSize | 0) + (x / cellSize | 0)] = s;
    } else if(whichSVG == 2) {
      grid2[gridWidth * (y / cellSize | 0) + (x / cellSize | 0)] = s;
    }
    ++sampleSize;
    ++queueSize;
    return s;
  }
}

start();

</script>
